package safenote;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.nio.file.Files;
import java.io.IOException;

public class SafeNote extends JFrame {

    private JTable noteListTable;
    private DefaultTableModel tableModel;
    private JTextArea noteTextArea;
    private JButton createNoteButton;
    private JButton deleteNoteButton;
    private JButton openNoteButton;

    public SafeNote() {
        setTitle("SafeNote");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLayout(new BorderLayout());

        // 좌측 패널: 노트 목록 테이블 및 버튼
        JPanel leftPanel = new JPanel(new BorderLayout());

        // 노트 목록 테이블
        String[] columnNames = {"이름", "경로", "수정일자", "크기"};
        tableModel = new DefaultTableModel(columnNames, 0);
        noteListTable = new JTable(tableModel);
        JScrollPane tableScrollPane = new JScrollPane(noteListTable);
        leftPanel.add(tableScrollPane, BorderLayout.CENTER);

        // 노트 관리 버튼 패널
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        createNoteButton = new JButton("새 노트");
        deleteNoteButton = new JButton("삭제");
        openNoteButton = new JButton("열기");
        
        buttonPanel.add(createNoteButton);
        buttonPanel.add(deleteNoteButton);
        buttonPanel.add(openNoteButton);
        leftPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(leftPanel, BorderLayout.WEST);

        // 우측 패널: 텍스트 편집 영역
        noteTextArea = new JTextArea();
        JScrollPane textAreaScrollPane = new JScrollPane(noteTextArea);
        add(textAreaScrollPane, BorderLayout.CENTER);

        createNoteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                NewNoteDialog dialog = new NewNoteDialog(SafeNote.this);
                dialog.setVisible(true);

                if (dialog.isCreated()) {
                    String noteName = dialog.getNoteName();
                    String password = dialog.getPassword();
                    String filePath = dialog.getFilePath();
                    String dummyContent = "";

                    try {
                        CryptoUtils.encrypt(dummyContent, password, filePath);
                        File newFile = new File(filePath);
                        tableModel.addRow(new Object[]{noteName, filePath, new Date(newFile.lastModified()), String.format("%.2f KB", (double) newFile.length() / 1024)});
                        JOptionPane.showMessageDialog(SafeNote.this, "새 노트가 성공적으로 생성되었습니다.", "성공", JOptionPane.INFORMATION_MESSAGE);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(SafeNote.this, "노트 생성에 실패했습니다: " + ex.getMessage(), "오류", JOptionPane.ERROR_MESSAGE);
                        ex.printStackTrace();
                    }
                }
            }
        });
        

        openNoteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = noteListTable.getSelectedRow();
                if (selectedRow >= 0) {
                    String filePath = (String) tableModel.getValueAt(selectedRow, 1); // 경로
                    String noteName = (String) tableModel.getValueAt(selectedRow, 0); // 이름
                    PasswordInputDialog passwordDialog = new PasswordInputDialog(SafeNote.this, "노트 열기 - " + noteName);
                    passwordDialog.setVisible(true);
                    String password = passwordDialog.getPassword();

                    if (password != null) {
                        try {
                            byte[] encryptedDataWithIv = Files.readAllBytes(new File(filePath).toPath());
                            String decryptedContent = CryptoUtils.decrypt(encryptedDataWithIv, password);
                            noteTextArea.setText(decryptedContent);
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(SafeNote.this, "노트를 여는 데 실패했습니다: " + ex.getMessage(), "오류", JOptionPane.ERROR_MESSAGE);
                            ex.printStackTrace();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(SafeNote.this, "열 노트를 먼저 선택해주세요.", "알림", JOptionPane.WARNING_MESSAGE);
                }
            }
        });

        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new SafeNote());
    }
}